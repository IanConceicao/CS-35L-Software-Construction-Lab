
    a <dfn>file name component</dfn> is a nonempty part of a file name
    a file name component cannot start with ‘<samp>.</samp>’.</li>
<a href='assign2.html'>this very web page</a> (which you should also
<a href='http://en.wikipedia.org/wiki/hawaiian_language'>hawaiian</a>,
“<a href='https://www.mauimapp.com/moolelo/hwnwdshw.htm'>hawaiian to english</a>”, an introductory list of words.
a language whose traditional orthography
  all other files.</p>
  and exit with a failure status, recursive ‘<samp>poornames
and extract those words; each word is a maximal sequence of one or
  and looks for violations of one or more of the guidelines in files
    and ‘<samp>libstdc++.so.6</samp>’, and the last component’s
  and ‘<samp>poornames -r /usr/lib</samp>’
  and second, you need to extend <samp>poornames</samp> to make
and <var>w</var> consists of entirely hawaiian characters or spaces,
(ascii apostrophe, which we use to represent &#8216;okina).
assignment’s web page, and run the following commands with that
assume that <var>w</var> contains zero or more nonempty hawaiian words
as the crude implementation of an
  attending the lab session for hints.</em></p>
  basic <samp>poornames</samp>.</p>
  because <samp>d/a/b</samp> does not violate any guideline.</p>
  because ‘<samp>+</samp>’ is not one of the allowed characters;
  because ‘<samp>@</samp>’ is not one of the allowed characters.</p>
</body>
<body>
  can be given; otherwise <samp>poornames</samp> should report the
carriage returns, and with no more than 80 columns per line (except possibly
  character is ‘<samp>-</samp>’,
  character that falls outside the guidelines.  the same command
  check the symbolic links’ names, just as it checks the names of
command:</p>
command.</p>
components contain special characters like spaces, ‘<samp>*</samp>’, and leading
containing newlines.
contains the two words
 &copy; 2005, 2007, 2008, 2010, 2013, 2019 paul eggert.
dictionary containing a copy of all the hawaiian words in
dictionary, since the dictionary is in all lower case.</p>
    differ only in case.  for example, if a directory contains a file
  directory contains a file <samp>&lbrack;</samp> that contains a
  directory entries (i.e., in files immediately under <var>d</var>).
  directory entries <samp>head</samp> and <samp>head</samp> fall
  directory entry in every directory under <var>d</var>, including
directory. to do that, you can use
<!doctype html>
doesn’t do all the work, your log should record in detail each bug
do not attempt to repair any remaining problems by hand; just use the
    editors that end lines with plain lf (i.e., newline
  (e.g., lack of permissions to read the directory) it should diagnose
english spelling checker. suppose we want to change englishchecker to be a
english words. create such a file by sorting the contents of the file
equivalent.</p>
extract these words systematically from the tables in “hawaiian to english”.
fetch with wget), and on the hawaiian dictionary <samp>hwords</samp>
  files exist, because the two directory entries in
  first, you need to write a basic <samp>poornames</samp> script,
  follow the guidelines, and finally followed by a trailing
  follow these guidelines. write a shell script <samp>poornames</samp>
</footer>
<footer>
for each remaining line of the form
for example, the entry ‘<samp>h&lt;u&gt;a&lt;/u&gt;`ule lau</samp>’
    for example, the file name ‘<samp>/usr/lib64/libstdc++.so.6</samp>’ has the
for the test output files). the shell
  generated by the above commands.</p>
<h1>assignment 2. shell scripting</h1>
<h2>homework: find poorly-named files</h2>
<h2>laboratory: spell-checking hawaiian</h2>
<h2>submit</h2>
<h3>basic <samp>poornames</samp></h3>
<h3>recursive <samp>poornames</samp></h3>
<h3>testing <samp>poornames</samp></h3>
has only the following
hawaiianchecker that checks the
</head>
<head>
  host <samp>lnxsrv07</samp>. save the twelve output files
<hr>
href='http://en.wikipedia.org/wiki/posix'>posix</a> <a
href='http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/v1_chap07.html#tag_07'>locale</a>. the
href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/locale.html'><samp>locale</samp></a>
</html>
<html lang='en'>
 $id: assign2.html,v 1.43 2019/10/10 06:22:57 eggert exp $
  (i.e., argument beginning with ‘<samp>-</samp>’)
  if <samp>poornames</samp> encounters an error when examining a directory
  (if <var>d</var> is a symbolic link, <samp>poornames</samp> should
  if <var>d</var> is not the name of a directory,
  if <var>d</var> is ‘<samp>.</samp>’, the current working directory.
into a shell script <samp>buildwords</samp>, which you should copy into your
  is intended to be portable to a wide variety of systems,
is upper case should be lower-cased before it is checked against the
it has.</p>
  it recursive.</p>
its <a href='http://pubs.opengroup.org/onlinepubs/9699919799/idx/utilities.html'>list
itself. count the number of distinct misspelled words on this very web
  just like any other non-directory.)
lab so that you can reproduce the results later. this should not
  last component does not follow the guidelines.
letters (or their capitalized equivalents):</p>
    letters, ‘<samp>.</samp>’, ‘<samp>-</samp>’, and ‘<samp>_</samp>’.
  <li>a file name component cannot start with ‘<samp>-</samp>’.</li>
  <li>a file name component must contain only ascii
  <li>a file name component must not contain more than 14 characters.</li>
  <li>except for ‘<samp>.</samp>’ and ‘<samp>..</samp>’,
  line containing each full file name if and only if the file name’s
<link rel='author' href='mailto:eggert@cs.ucla.edu'>
<link rel='license' href='copyright.html'>
  <li>no two files in the same directory can have names that
<li>the file <samp>lab2.log</samp> as described in the lab.</li>
<li>the <samp>poornames</samp> script described in the homework.</li>
<li>the script <samp>buildwords</samp> as described in the lab.</li>
<li>the twelve test output files described in the homework.</li>
log; it should read the html from standard input and write a sorted list of
maximal nonempty sequence of ascii letters or apostrophe is intended
merely be a transcript of what you typed: it should be more like a
<meta charset='utf-8'>
misspelled but hawaiianchecker does not, and give two examples of
more hawaiian characters.
    name ‘<samp>st._andrews</samp>’.</li>
  not follow the symbolic link, and should treat it as an error
  not necessarily in that order; it should not output ‘<samp>d/a/b/</samp>’
of distinct words on this very web page that englishchecker reports as
  of files under the subdirectory are also reported.</p>
of messing up your home directory or main development directory if
of utilities</a> for the commands that your script may use. (hint: see
</ol>
<ol>
  on the seasnet gnu/linux
or <samp>lc_ctype="posix"</samp>. if it doesn’t, use the following
    or <samp>'\n'</samp>).</em> do not use notepad or similar tools
outputs (in particular, how its output differs from that of the
  outside the guidelines (either entry alone would be ok, but the
</p>
<p>
page, using both englishchecker and hawaiianchecker. count the number
<p>all files should be ascii text files, with no
<p>although basic ‘<samp>poornames -r</samp>’ should report an error
<p>and make sure <samp>locale</samp> outputs the right thing afterwards.</p>
<p> any ‘<samp>-r</samp>’ option-argument must
<p>check your work by running your hawaiian spelling checker on
<p>create in the file <samp>hwords</samp> a simple hawaiian
<p><em>warning: it will be difficult to do this homework without
<p><em>warning: you should edit your files with emacs or with other
<p>for this laboratory assume you’re in the standard c or <a
<p>from the englishchecker command, derive a shell command
<p>here are some simple tests to try, but you should not limit
<p>if a subdirectory name violates the guidelines, <samp>poornames</samp>
<p>if the shell script has bugs and
<p>in its basic form, when given one operand <var>d</var>,
<p>in this lab for convenience we use ascii apostrophe (') to
<p>keep a log in the file <samp>lab2.log</samp> of what you do in the
<p>let’s take the last command (marked englishchecker)
<p>once your script passes your initial tests, try it out as follows:</p>
<p>once you’ve implemented the basic form, extend
   poornames -r /usr/bin   > bin-r.1   2> bin-r.2
   poornames -r /usr/lib   > lib-r.1   2> lib-r.2
   poornames -r /usr/share > share-r.1 2> share-r.2
   poornames    /usr/lib   > lib.1     2> lib.2
   poornames    /usr/share > share.1   2> share.2
portable to any system that
posix shell and utilities</a>; please see
  precede any <var>d</var> operand, and at most one option-argument
<p>recursive <samp>poornames</samp> should not follow symbolic links
<pre><samp><a href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/v3_chap02.html#export'>export</a> lc_all='c'
<pre><samp>awk '/\r/ || 80 &lt; length' buildwords lab2.log poornames
<pre><samp>cat foo.html bar.html | ./buildwords | less
<pre><samp>p k ' m n w l h a e i o u
<pre><samp>   poornames    /usr/bin   > bin.1     2> bin.2
<pre><samp>tr -c 'a-za-z' '[\n*]'
  presence of both entries mean that both are invalid). the command
previous command), and why.</p>
  problem on standard error and exit with a failure status.</p>
<p>should output nothing.</p>
<p>submit the following files.</p>
<p>the command ‘<samp>poornames /usr/bin</samp>’ should output a line
<p>the commands ‘<samp>poornames /usr/lib</samp>’ should
<p>then, take a text file containing the html in this
<p>the <samp>poornames</samp> script should output a
<p>the <samp>poornames</samp> script should work with file names whose
<p>to illustrate the rules for subdirectories, suppose
<p>we also assume the file <samp>words</samp> contains a sorted list of
<p>when testing your script, it is a good idea to do the testing in a
<p>your boss has given you the job of looking for projects that do not
<p>you’re working in a project that has lots of files and
<p>your script should be runnable as an ordinary user, and should be
  recurse through the working directory. the grader should be able to
  recursive <samp>poornames</samp> should look recursively at every
remove all instances of ‘<samp>?</samp>’, ‘<samp>&lt;u&gt;</samp>’ and
represent the hawaiian &#8216;okina (&#8216;); it has no capitalized
  -r</samp>’ should behave like ‘<samp>poornames -r .</samp>’ and
  <samp>d/a/c</samp> is a file, and no other files exist. then
  ‘<samp>d/a/</samp>’, ‘<samp>d/a/b/</samp>’, ‘<samp>d/a/b/</samp>’,
  <samp>d/a</samp>, <samp>d/a/b</samp>, <samp>d/a/b</samp>, <samp>d/a/c</samp>, <samp>d/a</samp>, <samp>d/a/b</samp>, <samp>d/a/c</samp> are all directories,
  ‘<samp>d/a/</samp>’, ‘<samp>d/a/c/</samp>’, and ‘<samp>d/a/c</samp>’,
‘<samp>ha'ule</samp>’ and ‘<samp>lau</samp>’.
‘<samp>&lt;/u&gt;</samp>’.
  ‘<samp>poornames -r d</samp>’ should output lines
  ‘<samp>poornames -r /usr/lib</samp>’ should also output the lines
  <samp>poornames</samp> should diagnose the problem on stderr and exit
  <samp>poornames</samp> should look for violations in <var>d</var>’s
  <samp>poornames</samp> so that it optionally runs recursively.
  ‘<samp>poornames /usr/share/locale</samp>’ should output the line
</samp></pre>
<samp>`</samp> (ascii grave accent) as if it were <samp>'</samp>
‘<samp>-</samp>’ (except that <var>d</var> itself cannot begin with
  ‘<samp>/</samp>’, followed by the file name component that does not
‘<samp>-</samp>’). however, you need not worry about file names
  ‘<samp>/</samp>’ if the named file is a directory.
  ‘<samp>/</samp>’ if <var>d</var> does not already end in
    ‘<samp>st._andrews</samp>’ it cannot also contain a file
  ‘<samp>/usr/bin/head</samp>’ if both files exist, because the
  ‘<samp>/usr/bin/&lbrack;</samp>’ because the <samp>/usr/bin</samp>
  ‘<samp>/usr/lib/firmware/radeon/hawaii_ce.bin</samp>’ and
  ‘<samp>/usr/lib/firmware/radeon/hawaii_ce.bin</samp>’ if those two
  <samp>/usr/lib/firmware/radeon</samp> are the same if case is ignored.</p>
<samp>/usr/share/dict/words</samp> on the seasnet gnu/linux hosts, and putting
  ‘<samp>/usr/share/locale/en@quot/</samp>’ if that directory exists,
‘<samp><var>a</var>&lt;td<var>x</var>&gt;<var>w</var>&lt;/td&gt;<var>z</var></samp>’,
script with a command like this:</p>
</section>
<section>
 see <a href='../copyright.html'>copying rules</a>.<br>
shell command <a
shell command:</p>
  should also output the lines ‘<samp>/usr/bin/head</samp>’ and
  should both output ‘<samp>/usr/lib/libstdc++.so.6</samp>’ if it exists,
should output <samp>lc_ctype="c"</samp>
  should report the name, but this should not affect whether names
</small>
<small>
  some of which have fairly-restrictive rules for file names.
sort the resulting list of words, removing any duplicates.
spelling checker for
spelling of hawaiian rather than english, under the assumption
subdirectory devoted just to testing.  this will reduce the likelihood
supports <a href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/toc.html'>standard
systematic rules mentioned above. automate the systematic rules
text file being standard input. describe generally what each command
  that accepts a project’s directory name <var>d</var> as an operand
    that is a maximal sequence of characters other than ‘<samp>/</samp>’;
    that may convert line endings
that <samp>hwords</samp> is a hawaiian dictionary and that every
  the full file name should start with <var>d</var>, followed by
  the order of output lines does not matter.</p>
  the problem on stderr, but it need not exit with a failure status.</p>
the result into a file named <samp>words</samp> in your working
the <samp><a href='http://pubs.opengroup.org/onlinepubs/9699919799/utilities/sort.html'>sort</a></samp>
the <samp>find</samp> and <samp>sort</samp>
  the <samp>poornames</samp> script should not output duplicate lines.
these words.  similarly, count the number of distinct words (and give
the tables in
    three components ‘<samp>usr</samp>’, ‘<samp>lib64</samp>’,
<title>assignment 2. shell scripting</title>
    to <a href='https://en.wikipedia.org/wiki/crlf'>crlf</a> form.</p>
to be a hawaiian word and needs its spelling checked. input that
tr -cs 'a-za-z' '[\n*]'
tr -cs 'a-za-z' '[\n*]' | sort
tr -cs 'a-za-z' '[\n*]' | sort -u
tr -cs 'a-za-z' '[\n*]' | sort -u | comm -23 - words # englishchecker
tr -cs 'a-za-z' '[\n*]' | sort -u | comm - words
treat upper case letters as if they were lower case, and treat
true lab notebook, in which you briefly note down what you did and
two examples) that hawaiianchecker reports as misspelled on this very
    two ‘<samp>+</samp>’ characters violate this guideline.</li>
</ul>
<ul>
  under <var>d</var>. there are two parts to this assignment:
unique words to standard output.  for example, we should be able to run this
use <a href='http://www.gnu.org/software/wget/'>wget</a> to obtain
  use use the behavior of ‘<samp>poornames -r</samp>’ to test whether
utilities.)</p>
  <var>d</var> itself.</p>
<var>x</var> contains no ‘<samp>&gt;</samp>’ characters
web page but englishchecker does not.</p>
what happened.</p>
  when given an ‘<samp>-r</samp>’ option-argument,
  when given no operands, <samp>poornames</samp> should act as
  when given two or more operands, or a single operand whose first
  when recursively looking for poorly-named files. however, it should
where <var>a</var> and <var>z</var> are zero or more spaces,
  with a failure status.
  you have attempted to do recursive <samp>poornames</samp>, or just
your copy of that web page.
  your project has established the following portability guidelines:</p>
your script goes haywire.</p>
  yourself to just these tests.</p>
